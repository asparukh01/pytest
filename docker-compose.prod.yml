version: '3'

services:
  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 300 gservicegroup celery

  web:
    image: esdp2/gservicegroup:latest
    container_name: gservicegroup
    restart: always
    command: gunicorn core.wsgi:application --bind 0.0.0.0:8000 --workers 3
    volumes:
      - static_volume:/app/static
    expose:
      - 8000
    env_file:
      - ./.env_prod
    depends_on:
      - postgres
      - redis

  postgres:
    container_name: postgres
    image: postgres:latest
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env_prod.db

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis:/data

  celery:
    container_name: celery
    image: esdp2/celery:latest
    restart: always
    volumes:
      - .:/app
    env_file:
      - .env_prod
    links:
      - redis
    depends_on:
      - redis
      - web

  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    volumes:
      - static_volume:/app/static
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web

  certbot:
    image: certbot/certbot
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  postgres_data:
  redis:
  static_volume:
  certbot:
  watchtower:
